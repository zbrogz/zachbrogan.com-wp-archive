{"id":292,"date":"2018-03-24T03:44:23","date_gmt":"2018-03-24T03:44:23","guid":{"rendered":"http:\/\/wp-archive.zachbrogan.com\/?p=292"},"modified":"2018-03-27T01:42:51","modified_gmt":"2018-03-27T01:42:51","slug":"hvac-api","status":"publish","type":"post","link":"https:\/\/wp-archive.zachbrogan.com\/byu-iot-lab\/hvac-api\/","title":{"rendered":"HVAC API"},"content":{"rendered":"<h1>Web API for hvac built on AWS<\/h1>\n<p>The HVAC API is used as a virtual representation of the physical HVAC devices. It serves as a bridge between the physical hvac controller and other devices, software, and APIs. The API has methods and resources for adding new hvac devices, getting the state of an hvac device, updating the state, and others.<\/p>\n<div id=\"attachment_293\" style=\"width: 970px\" class=\"wp-caption alignnone\"><a href=\"http:\/\/wp-archive.zachbrogan.com\/byu-iot-lab\/hvac-api\/attachment\/iot-thermostat\/\" rel=\"attachment wp-att-293\"><img aria-describedby=\"caption-attachment-293\" loading=\"lazy\" src=\"http:\/\/wp-archive.zachbrogan.com\/wp-content\/uploads\/2018\/03\/IoT-Thermostat.png\" alt=\"\" width=\"960\" height=\"720\" class=\"size-full wp-image-293\" srcset=\"https:\/\/wp-archive.zachbrogan.com\/wp-content\/uploads\/2018\/03\/IoT-Thermostat.png 960w, https:\/\/wp-archive.zachbrogan.com\/wp-content\/uploads\/2018\/03\/IoT-Thermostat-300x225.png 300w, https:\/\/wp-archive.zachbrogan.com\/wp-content\/uploads\/2018\/03\/IoT-Thermostat-768x576.png 768w\" sizes=\"(max-width: 960px) 100vw, 960px\" \/><\/a><p id=\"caption-attachment-293\" class=\"wp-caption-text\">Diagram of IoT Thermostat APIs<\/p><\/div>\n<h2>State<\/h2>\n<p>So how does the API represent a controller for heating and air conditioning? It uses json formatted state objects sent in HTTP requests. The state includes the following parameters:<\/p>\n<ul>\n<li><strong>heater (T\/F):\u00a0<\/strong> A boolean indicating whether the heater is on or off.<\/li>\n<li><strong>ac (T\/F):\u00a0<\/strong>A boolean indicating whether the ac is on or off.<\/li>\n<li><strong>fan (T\/F):\u00a0<\/strong>A boolean indicating whether the fan is on or off.<\/li>\n<li><strong>area (String):\u00a0<\/strong>A string indicating the area in the home that the hvac controller is responsible for. Ex) &#8220;Upstairs&#8221;<\/li>\n<li><strong>update_period (Number):\u00a0<\/strong>How often (in seconds) the physical device should query the api to update its state.<\/li>\n<li><strong>off_time (Number):\u00a0<\/strong>How long the ac has been off.<\/li>\n<li><strong>min_off_time (Number):\u00a0<\/strong>Prevents the ac from turning on\/off too quickly.<\/li>\n<li><strong>uuid (String):\u00a0<\/strong>A unique ID representing the hvac controller.<\/li>\n<\/ul>\n<h2>API<\/h2>\n<p>You can test the api here: <a href=\"http:\/\/api.zachbrogan.com\/hvac\">api.zachbrogan.com\/hvac<\/a><\/p>\n<h3>\/hvac<\/h3>\n<p><strong>GET:\u00a0<\/strong>Returns an array of the state of all hvac controllers in json format<br \/>\nResponse body:<\/p>\n<pre>[\r\n {\r\n \"ac\": false,\r\n \"fan\": true,\r\n \"area\": \"new\",\r\n \"heater\": true,\r\n \"update_period\": 10,\r\n \"uuid\": \"2f3f04053b824a5491b4aa09975277f9\",\r\n \"min_off_time\": 0,\r\n \"off_time\": 6190\r\n },\r\n {\r\n \"ac\": false,\r\n \"fan\": false,\r\n \"area\": \"string\",\r\n \"heater\": false,\r\n \"update_period\": 30,\r\n \"uuid\": \"e74b80748033408bacc9939bc4ab8069\",\r\n \"off_time\": 0,\r\n \"min_off_time\": 10\r\n }\r\n]<\/pre>\n<p><strong>POST:\u00a0<\/strong>Creates a new hvac controller and returns the new device state in json format<br \/>\nRequest body:<\/p>\n<pre>{\r\n \"area\": \"Upstairs\"\r\n}<\/pre>\n<p>Response body:<\/p>\n<pre>{\r\n \"uuid\": \"b9ca242bf4c84ac7b3c9a1d5d406e9b5\",\r\n \"area\": \"Upstairs\",\r\n \"heater\": false,\r\n \"ac\": false,\r\n \"fan\": false,\r\n \"off_time\": 0,\r\n \"min_off_time\": 10,\r\n \"update_period\": 30\r\n}<\/pre>\n<h3>\/hvac\/&lt;id&gt;<\/h3>\n<p>(replace &lt;id&gt; with the uuid of the hvac controller)<\/p>\n<p><strong>GET:\u00a0<\/strong>Returns the state of a specific hvac controller<\/p>\n<p>Response body:<\/p>\n<pre>{\r\n \"ac\": false,\r\n \"fan\": false,\r\n \"area\": \"Upstairs\",\r\n \"heater\": false,\r\n \"update_period\": 30,\r\n \"uuid\": \"b9ca242bf4c84ac7b3c9a1d5d406e9b5\",\r\n \"off_time\": 0,\r\n \"min_off_time\": 10\r\n}<\/pre>\n<p><strong>PUT:\u00a0<\/strong>Updates the parameters of a specific hvac controller<\/p>\n<p>Request body (at least one parameter):<\/p>\n<pre>{\r\n \"ac\": true,\r\n \"fan\": true,\r\n \"area\": \"Downstairs\",\r\n \"heater\": false,\r\n \"update_period\": 10,\r\n \"off_time\": 10,\r\n \"min_off_time\": 30\r\n}<\/pre>\n<p>Response body:<\/p>\n<pre>{\r\n \"message\": \"Hvac updated\"\r\n}<\/pre>\n<p><strong>DELETE:\u00a0<\/strong>Delete a specific hvac controller<\/p>\n<p>Response body:<\/p>\n<pre>{\r\n \"message\": \"Hvac deleted.\"\r\n}\r\n\r\n\r\n<\/pre>\n<p>In addition to the methods listed above, I also included an OPTIONS method for each resource so CORS support can be enabled. This makes it possible for web apps on a different domain to utilize the API more fully.<\/p>\n<h2>Deployment<\/h2>\n<p>The API could be implemented on any server really, but I found the AWS serverless ecosystem to be convenient for deployment. The hvac api is created using Amazon <strong>API Gateway + Lambda + Dynamodb<\/strong>. To make deployment even easier, I used a software tool called <a href=\"https:\/\/github.com\/byu-oit\/handel\">handel<\/a>.<\/p>\n<p>The code for the API is located here:\u00a0<a href=\"https:\/\/github.com\/zbrogz\/hvacAPI\">https:\/\/github.com\/zbrogz\/hvacAPI<\/a>, which include 3 important files:<\/p>\n<ol>\n<li><strong>handel.yml:\u00a0<\/strong>The handel file, which specifies which AWS resources to create and link together. This includes api gateway and dynamodb.<\/li>\n<li><strong>swagger.yml:\u00a0<\/strong>The swagger file, which outlines the API structure for API gateway. It also references the lambda function that is called for each resource method.<\/li>\n<li><strong>state.py:\u00a0<\/strong>The lambda function, implemented in python. It makes the connections between api calls and the dynamoDB hvac controller state database.<\/li>\n<\/ol>\n<p>Deployment instructions are included in the readme on github for HVAC API.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Web API for hvac built on AWS The HVAC API is used as a virtual representation of the physical HVAC devices. It serves as a bridge between the physical hvac controller and other devices, software, and APIs. The API has methods and resources for adding new hvac devices, getting the [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[8],"tags":[19,18,13],"_links":{"self":[{"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/posts\/292"}],"collection":[{"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/comments?post=292"}],"version-history":[{"count":6,"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/posts\/292\/revisions"}],"predecessor-version":[{"id":299,"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/posts\/292\/revisions\/299"}],"wp:attachment":[{"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/media?parent=292"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/categories?post=292"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/tags?post=292"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}