{"id":316,"date":"2018-04-11T22:32:50","date_gmt":"2018-04-11T22:32:50","guid":{"rendered":"http:\/\/wp-archive.zachbrogan.com\/?p=316"},"modified":"2018-04-11T22:38:15","modified_gmt":"2018-04-11T22:38:15","slug":"thermostat-api","status":"publish","type":"post","link":"https:\/\/wp-archive.zachbrogan.com\/byu-iot-lab\/thermostat-api\/","title":{"rendered":"Thermostat API"},"content":{"rendered":"<h2>An IoT thermostat API to connect hvac and temperature APIs<\/h2>\n<p>The thermostat API provides controls and logic for the whole thermostat system. This component of an IoT thermostat is what ties everything together: It gets the current temperature from the temperature API, compares it to the desired temperature (and other settings), and computes the next heating and air conditioning state to send to the hvac API. The figure below illustrates the big picture IoT thermostat. Specifically, you can see that the thermostat API is a solely virtual component of the thermostat. It connects to two other APIs that have both virtual and physical interfaces.<\/p>\n<div id=\"attachment_293\" style=\"width: 970px\" class=\"wp-caption alignnone\"><img aria-describedby=\"caption-attachment-293\" loading=\"lazy\" src=\"http:\/\/wp-archive.zachbrogan.com\/wp-content\/uploads\/2018\/03\/IoT-Thermostat.png\" alt=\"\" width=\"960\" height=\"720\" class=\"size-full wp-image-293\" srcset=\"https:\/\/wp-archive.zachbrogan.com\/wp-content\/uploads\/2018\/03\/IoT-Thermostat.png 960w, https:\/\/wp-archive.zachbrogan.com\/wp-content\/uploads\/2018\/03\/IoT-Thermostat-300x225.png 300w, https:\/\/wp-archive.zachbrogan.com\/wp-content\/uploads\/2018\/03\/IoT-Thermostat-768x576.png 768w\" sizes=\"(max-width: 960px) 100vw, 960px\" \/><p id=\"caption-attachment-293\" class=\"wp-caption-text\">Diagram of IoT Thermostat APIs<\/p><\/div>\n<p>&nbsp;<\/p>\n<h2>API<\/h2>\n<p>The REST API for the thermostat has a lot of similarities to both the\u00a0<a href=\"http:\/\/wp-archive.zachbrogan.com\/byu-iot-lab\/hvac-api\/\">hvac controller API<\/a>\u00a0and <a href=\"http:\/\/wp-archive.zachbrogan.com\/byu-iot-lab\/temperature-sensor\/\">temperature sensor API<\/a>. Below is a brief summary of the API.<\/p>\n<p><strong>Code for API:\u00a0<a href=\"https:\/\/github.com\/zbrogz\/temperatureSensorAPI\">https:\/\/github.com\/zbrogz\/thermostatAPI<\/a><\/strong><\/p>\n<p><strong>API URL:\u00a0<a href=\"https:\/\/api.zachbrogan.com\/temperature\">https:\/\/api.zachbrogan.com\/thermostat<\/a><\/strong><\/p>\n<h4>State<\/h4>\n<ul>\n<li style=\"list-style-type: none;\">\n<ul>\n<li><strong>desired_temperature (Number):\u00a0<\/strong> A number representing what the temperature is set to.<\/li>\n<li><strong>mode (String):\u00a0<\/strong>The thermostat can be in one of 5 modes: off, heat, cool, normal,\u00a0 or eco.\n<ul>\n<li>off: The hvac state should be idle (fan, heater, ac all off), regardless of the current or desired temperature.<\/li>\n<li>heat: Only heat if the temperature is lower than the set temperature; don&#8217;t use the ac if the temperature is above the set temperature.<\/li>\n<li>cool: Only cool if the temperature is higher than the set temperature; don&#8217;t use the heater if the temperature is below the set temperature.<\/li>\n<li>normal: Heat or cool as needed to achieve the desired temperature. (this is the default)<\/li>\n<li>eco: The economical\/ecological mode; only heat or cool to achieve a range of temperatures. This can help to reduce energy costs.<\/li>\n<\/ul>\n<\/li>\n<li><strong>fan (String):\u00a0<\/strong>Set to auto or on. Primarily used to manually turn on the fan.\n<ul>\n<li>auto: the fan should be on when heating or cooling, off otherwise.<\/li>\n<li>on: the fan should always be on.<\/li>\n<\/ul>\n<\/li>\n<li><strong>eco_min_temperature (Number):\u00a0<\/strong>The lower bound of the eco mode range of temperatures.<\/li>\n<li><strong>eco_max_temperature (Number):\u00a0<\/strong>The upper bound of the eco mode range of temperatures.<\/li>\n<li><strong>tolerance (Number):<\/strong>\u00a0Tolerance of desired temperature. Can be used (if needed) to avoid hvac frequently turning on and off.<\/li>\n<li><strong>area (String):\u00a0<\/strong>A string indicating the area in the home that the thermostat is responsible for. Ex) &#8220;Family Room&#8221;<\/li>\n<li><strong>hvac_url (String):\u00a0<\/strong>The url for the hvac controller&#8217;s API where the updated heating\/cooling state is sent to.<\/li>\n<li><strong>temperature_url (String):\u00a0<\/strong>The url for the temperature sensor&#8217;s API where the current temperature is retrieved.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<ul>\n<li><strong>uuid (String):\u00a0<\/strong>A unique ID representing the thermostat.<\/li>\n<\/ul>\n<p>Example:<\/p>\n<pre>{\r\n\"desired_temperature\": 70, \r\n\"temperature_url\": \"https:\/\/api.zachbrogan.com\/temperature\/6d6f37fbae8947979cd6a95098649875\", \r\n\"tolerance\": 1, \r\n\"fan\": \"auto\", \r\n\"area\": \"Main Floor\", \r\n\"hvac_url\": \"https:\/\/api.zachbrogan.com\/hvac\/2f3f04053b824a5491b4aa09975277f9\", \r\n\"mode\": \"off\", \r\n\"uuid\": \"47b42a430c9b4910910d781f454c1147\", \r\n\"eco_max_temperature\": 78, \r\n\"eco_min_temperature\": 65\r\n}<\/pre>\n<h4>API Resources &amp; Methods<\/h4>\n<h5>\/thermostat<\/h5>\n<p><strong>GET, OPTIONS, POST<\/strong><\/p>\n<h5>\/thermostat\/{uuid}<\/h5>\n<p><strong>GET, OPTIONS, PUT, DELETE<\/strong><\/p>\n<h2>Organization<\/h2>\n<p>Like mentioned at the end of the\u00a0<a href=\"http:\/\/wp-archive.zachbrogan.com\/byu-iot-lab\/hvac-api\/\">hvac controller API<\/a>\u00a0post, the APIs could be implemented pretty much anywhere, but I opted to use Amazon Web Services. The thermostat API uses the following AWS services:<\/p>\n<ul>\n<li><strong> API Gateway:<\/strong> Routes API HTTP requests to the correct resource, such as lambda functions.<\/li>\n<li><strong>Lambda:\u00a0<\/strong>Serverless functions that perform actions, such as accessing a database. The thermostat API has two lambda functions:\n<ul>\n<li>state.py: Manages the thermostat state stored in the database<\/li>\n<li>updater.py: Retrieves the current temperature and thermostat settings, and computes the next hvac state, which is then sent to the hvac API.<\/li>\n<\/ul>\n<\/li>\n<li><strong>Dynamodb:\u00a0<\/strong>A database for storing the thermostat state parameters, such as the desired temperature.<\/li>\n<li><strong>CloudWatch:\u00a0<\/strong>A timer for calling the updater lambda every minute.<\/li>\n<\/ul>\n<h2>Deployment<\/h2>\n<p>To deploy the thermostat API on AWS using <a href=\"https:\/\/handel.readthedocs.io\/en\/latest\/index.html\">handel<\/a>, follow the instructions below. You can also find them on my <a href=\"https:\/\/github.com\/zbrogz\/thermostatAPI\">repo<\/a>.<\/p>\n<ol>\n<li>Install Node.js:<span>\u00a0<\/span><a href=\"https:\/\/nodejs.org\/en\/\" rel=\"nofollow\">https:\/\/nodejs.org\/en\/<\/a><\/li>\n<li>Install Handel:<span>\u00a0<\/span><code>npm install -g handel<\/code><\/li>\n<li>Install AWS CLI:<span>\u00a0<\/span><a href=\"http:\/\/docs.aws.amazon.com\/cli\/latest\/userguide\/installing.html\" rel=\"nofollow\">http:\/\/docs.aws.amazon.com\/cli\/latest\/userguide\/installing.html<\/a><\/li>\n<li>Configure AWS CLI:<span>\u00a0<\/span><a href=\"http:\/\/docs.aws.amazon.com\/cli\/latest\/userguide\/cli-chap-getting-started.html\" rel=\"nofollow\">http:\/\/docs.aws.amazon.com\/cli\/latest\/userguide\/cli-chap-getting-started.html<\/a><\/li>\n<li>Clone the thermostatAPI repo:<span>\u00a0<\/span><code>git clone https:\/\/github.com\/zbrogz\/thermostatAPI.git<\/code><\/li>\n<li>Deploy the hvacAPI using handel:<span>\u00a0<\/span><code>handel deploy -c default-us-west-2 -e dev<\/code><\/li>\n<\/ol>\n<p>Once handel finishes deploying the API, you can find the url to the API:<\/p>\n<ol>\n<li>Log in to aws.amazon.com<\/li>\n<li>Go to services &#8211;&gt; API Gateway<\/li>\n<li>Click on the API:\u00a0thermostatAPI-dev-api-apigateway<\/li>\n<li>Go to stages<\/li>\n<li>Copy the URL from &#8216;Invoke URL&#8217;<\/li>\n<\/ol>\n<p>You can also create a custom url for the API, rather then the url given by Amazon. For example, I have <a href=\"http:\/\/api.zachbrogan.com\/thermostat\">api.zachbrogan.com\/thermostat<\/a>. I will post instructions on how to do this in the future.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>An IoT thermostat API to connect hvac and temperature APIs The thermostat API provides controls and logic for the whole thermostat system. This component of an IoT thermostat is what ties everything together: It gets the current temperature from the temperature API, compares it to the desired temperature (and other [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[8],"tags":[],"_links":{"self":[{"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/posts\/316"}],"collection":[{"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/comments?post=316"}],"version-history":[{"count":3,"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/posts\/316\/revisions"}],"predecessor-version":[{"id":320,"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/posts\/316\/revisions\/320"}],"wp:attachment":[{"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/media?parent=316"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/categories?post=316"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/tags?post=316"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}