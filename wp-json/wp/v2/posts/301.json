{"id":301,"date":"2018-04-05T00:28:06","date_gmt":"2018-04-05T00:28:06","guid":{"rendered":"http:\/\/wp-archive.zachbrogan.com\/?p=301"},"modified":"2018-04-05T00:33:30","modified_gmt":"2018-04-05T00:33:30","slug":"temperature-sensor","status":"publish","type":"post","link":"https:\/\/wp-archive.zachbrogan.com\/byu-iot-lab\/temperature-sensor\/","title":{"rendered":"Temperature Sensor"},"content":{"rendered":"<h2>An independent temperature sensor as part of the IoT thermostat<\/h2>\n<p>As mentioned in one of my <a href=\"http:\/\/wp-archive.zachbrogan.com\/byu-iot-lab\/hvac-controller\/\">previous posts<\/a>, a typical thermostat can be broken down into four subsystems:<\/p>\n<ol>\n<li>HVAC controller for activating heater\/ac\/fan<\/li>\n<li>Temperature sensor<\/li>\n<li>Temperature set point: interface for setting desired temperature<\/li>\n<li>Thermostat: logic for determining the the hvac state to achieve the desired temperature<\/li>\n<\/ol>\n<p>The purpose of the temperature sensor is to provide the current temperature for the thermostat API so that it can determine whether or not the home needs to be heated or cooled. Potentially, multiple temperature sensors could be in various rooms to help determine how well the heating\/cooling system is distributing the temperature across the house. While the hvac controller is an actuator (it acts on the physical world), the temperature sensor reports information on the physical world. That being said, the hardware, software, and API for the temperature sensor are actually very similar to that of the hvac controller.<\/p>\n<h2>Hardware<\/h2>\n<ul>\n<li>ESP8266 (specifically I&#8217;m using the <a href=\"https:\/\/wiki.wemos.cc\/products:d1:d1_mini\">Wemos D1 mini<\/a>)<\/li>\n<\/ul>\n<p><a href=\"http:\/\/wp-archive.zachbrogan.com\/uncategorized\/temperature-sensor\/attachment\/d1_mini_v3-0-0_1_16x9\/\" rel=\"attachment wp-att-302\"><img loading=\"lazy\" src=\"http:\/\/wp-archive.zachbrogan.com\/wp-content\/uploads\/2018\/04\/d1_mini_v3.0.0_1_16x9-300x169.jpg\" alt=\"Wemos D1 Mini ESP8266\" width=\"300\" height=\"169\" class=\"size-medium wp-image-302 alignnone\" srcset=\"https:\/\/wp-archive.zachbrogan.com\/wp-content\/uploads\/2018\/04\/d1_mini_v3.0.0_1_16x9-300x169.jpg 300w, https:\/\/wp-archive.zachbrogan.com\/wp-content\/uploads\/2018\/04\/d1_mini_v3.0.0_1_16x9-768x432.jpg 768w, https:\/\/wp-archive.zachbrogan.com\/wp-content\/uploads\/2018\/04\/d1_mini_v3.0.0_1_16x9-1024x576.jpg 1024w, https:\/\/wp-archive.zachbrogan.com\/wp-content\/uploads\/2018\/04\/d1_mini_v3.0.0_1_16x9.jpg 1600w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a><\/p>\n<ul>\n<li>TMP36GZ temperature sensor<\/li>\n<\/ul>\n<p><a href=\"http:\/\/wp-archive.zachbrogan.com\/uncategorized\/temperature-sensor\/attachment\/tmp36gz-temperature-sensor-1000x750\/\" rel=\"attachment wp-att-304\"><img loading=\"lazy\" src=\"http:\/\/wp-archive.zachbrogan.com\/wp-content\/uploads\/2018\/04\/tmp36gz-temperature-sensor-1000x750-300x225.jpg\" alt=\"\" width=\"300\" height=\"225\" class=\"alignnone size-medium wp-image-304\" srcset=\"https:\/\/wp-archive.zachbrogan.com\/wp-content\/uploads\/2018\/04\/tmp36gz-temperature-sensor-1000x750-300x225.jpg 300w, https:\/\/wp-archive.zachbrogan.com\/wp-content\/uploads\/2018\/04\/tmp36gz-temperature-sensor-1000x750-768x576.jpg 768w, https:\/\/wp-archive.zachbrogan.com\/wp-content\/uploads\/2018\/04\/tmp36gz-temperature-sensor-1000x750.jpg 1000w\" sizes=\"(max-width: 300px) 100vw, 300px\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<ul>\n<li>Power source<\/li>\n<\/ul>\n<p>Currently the power source is just from a usb adapter, however, I intend on exploring powering the device from battery in the future. This may be useful: https:\/\/hackaday.io\/project\/20588-espmobe-battery-powered-esp8266-iot-sensor. I need to do more research, but I have made some rough calculations on battery life for the device.<\/p>\n<ul>\n<li>ESP idle current: 70mA<\/li>\n<li>ESP sleep current: &lt;1mA (microamps)<\/li>\n<li>ESP sending current: 70 &#8211; 140 mA&#8230; around 80 mA most of the time<\/li>\n<li>Time to wakeup, connect to WiFi, and send state: ~5.5 seconds<\/li>\n<li>Battery life (assuming 1000mAh battery, very rough estimates)\n<ul>\n<li><strong>Sending data once a minute: ~1 week battery life<\/strong><\/li>\n<li><strong>Sending data once an hour: ~1 year battery life<\/strong><\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>Also, I may include a schematic in the future, but for now I will include a picture, as well as a description of the connections.<\/p>\n<p>ESP8266 Pins<\/p>\n<ul>\n<li>A0 (analog pin) &#8211;&gt; TMP36GZ pin 2 (voltage out, middle pin)<\/li>\n<li>G (ground) &#8211;&gt; power source ground and TMP36GZ pin 3 (right pin)<\/li>\n<li>3V3 (VCC) &#8211;&gt; power source 3.3V and TMP36GZ pin 1 (left pin)<\/li>\n<\/ul>\n<div id=\"attachment_306\" style=\"width: 754px\" class=\"wp-caption alignnone\"><img aria-describedby=\"caption-attachment-306\" loading=\"lazy\" src=\"http:\/\/wp-archive.zachbrogan.com\/wp-content\/uploads\/2018\/04\/IMG_2425-e1522883899943-744x1024.jpg\" alt=\"Temperature Sensor Wiring\" width=\"744\" height=\"1024\" class=\"wp-image-306 size-large\" srcset=\"https:\/\/wp-archive.zachbrogan.com\/wp-content\/uploads\/2018\/04\/IMG_2425-e1522883899943-744x1024.jpg 744w, https:\/\/wp-archive.zachbrogan.com\/wp-content\/uploads\/2018\/04\/IMG_2425-e1522883899943-218x300.jpg 218w, https:\/\/wp-archive.zachbrogan.com\/wp-content\/uploads\/2018\/04\/IMG_2425-e1522883899943-768x1057.jpg 768w, https:\/\/wp-archive.zachbrogan.com\/wp-content\/uploads\/2018\/04\/IMG_2425-e1522883899943.jpg 1794w\" sizes=\"(max-width: 744px) 100vw, 744px\" \/><p id=\"caption-attachment-306\" class=\"wp-caption-text\">Temperature Sensor Wiring<\/p><\/div>\n<h2>Software<\/h2>\n<p><a href=\"https:\/\/github.com\/zbrogz\/temperatureSensor\">https:\/\/github.com\/zbrogz\/temperatureSensor<\/a><\/p>\n<p>The software for the esp8266-based temperature sensor is also very similar to that of the hvac controller. The principal differences are that the temperature sensor uses PUT requests to send data to its API and update its state, whereas the hvac controller uses GET requests to retrieve its state. The software was created in the Arduino IDE, which was also used to flash the image onto the esp8266 over USB.<\/p>\n<ol>\n<li>Connect to WiFi<\/li>\n<li>Read temperature from analog pin<\/li>\n<li>Send temperature to API<\/li>\n<li>Parse response and update state as needed<\/li>\n<li>Wait\/sleep for a set time (update_period)<\/li>\n<li>Repeat from step 2<\/li>\n<\/ol>\n<h2>API<a href=\"https:\/\/github.com\/zbrogz\/temperatureSensorAPI\"><\/a><\/h2>\n<div id=\"attachment_293\" style=\"width: 970px\" class=\"wp-caption alignnone\"><img aria-describedby=\"caption-attachment-293\" loading=\"lazy\" src=\"http:\/\/wp-archive.zachbrogan.com\/wp-content\/uploads\/2018\/03\/IoT-Thermostat.png\" alt=\"\" width=\"960\" height=\"720\" class=\"size-full wp-image-293\" srcset=\"https:\/\/wp-archive.zachbrogan.com\/wp-content\/uploads\/2018\/03\/IoT-Thermostat.png 960w, https:\/\/wp-archive.zachbrogan.com\/wp-content\/uploads\/2018\/03\/IoT-Thermostat-300x225.png 300w, https:\/\/wp-archive.zachbrogan.com\/wp-content\/uploads\/2018\/03\/IoT-Thermostat-768x576.png 768w\" sizes=\"(max-width: 960px) 100vw, 960px\" \/><p id=\"caption-attachment-293\" class=\"wp-caption-text\">Diagram of IoT Thermostat APIs<\/p><\/div>\n<p>The REST API for the temperature is also very similar to the <a href=\"http:\/\/wp-archive.zachbrogan.com\/byu-iot-lab\/hvac-api\/\">hvac controller API<\/a>. Below is a brief summary of the API.<\/p>\n<p><strong>Code for API:\u00a0<a href=\"https:\/\/github.com\/zbrogz\/temperatureSensorAPI\">https:\/\/github.com\/zbrogz\/temperatureSensorAPI<\/a><\/strong><\/p>\n<p><strong>API URL:\u00a0<a href=\"https:\/\/api.zachbrogan.com\/temperature\">https:\/\/api.zachbrogan.com\/temperature<\/a><\/strong><\/p>\n<h4>State<\/h4>\n<p>The main parameter of the temperature sensor state is&#8211;unsurprisingly&#8211;the temperature. This is the only parameter that the device updates.<\/p>\n<ul>\n<li><strong>temperature:\u00a0<\/strong> A number representing the temperature<\/li>\n<li><strong>temperature_scale:\u00a0<\/strong>A string indicating &#8220;fahrenheit&#8221; or &#8220;celsius&#8221;.<\/li>\n<li><strong>area (String):\u00a0<\/strong>A string indicating the area in the home that the temperature sensor is responsible for. Ex) &#8220;Family Room&#8221;<\/li>\n<li><strong>update_period (Number):\u00a0<\/strong>How often (in seconds) the physical device should query the api to update its state.<\/li>\n<li><strong>uuid (String):\u00a0<\/strong>A unique ID representing the sensor.<\/li>\n<\/ul>\n<p>Example:<\/p>\n<pre>{\r\n\"update_period\": 10,\r\n\"uuid\": \"6d6f37fbae8947979cd6a95098649875\", \r\n\"area\": \"test_area\", \r\n\"temperature\": 67, \r\n\"temperature_scale\": \"fahrenheit\"\r\n}<\/pre>\n<h4>API Resources &amp; Methods<\/h4>\n<h5>\/temperature<\/h5>\n<p><strong>GET, OPTIONS, POST<\/strong><\/p>\n<h5>\/temperature\/{uuid}<\/h5>\n<p><strong>GET, OPTIONS, PUT, DELETE<\/strong><\/p>\n","protected":false},"excerpt":{"rendered":"<p>An independent temperature sensor as part of the IoT thermostat As mentioned in one of my previous posts, a typical thermostat can be broken down into four subsystems: HVAC controller for activating heater\/ac\/fan Temperature sensor Temperature set point: interface for setting desired temperature Thermostat: logic for determining the the hvac [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[8],"tags":[19,18,16,22,21,23,15,24,25],"_links":{"self":[{"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/posts\/301"}],"collection":[{"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/comments?post=301"}],"version-history":[{"count":10,"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/posts\/301\/revisions"}],"predecessor-version":[{"id":315,"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/posts\/301\/revisions\/315"}],"wp:attachment":[{"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/media?parent=301"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/categories?post=301"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/wp-archive.zachbrogan.com\/wp-json\/wp\/v2\/tags?post=301"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}